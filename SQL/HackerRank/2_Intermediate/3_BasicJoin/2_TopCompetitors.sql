/*
SELECT DISTINCT H.HACKER_ID, H.NAME
FROM HACKERS H
LEFT OUTER JOIN CHALLENGES C
ON H.HACKER_ID = C.HACKER_ID
LEFT OUTER JOIN DIFFICULTY D
ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
LEFT OUTER JOIN SUBMISSIONS S
ON C.CHALLENGE_ID = S.CHALLENGE_ID
WHERE S.SCORE = D.SCORE
ORDER BY H.HACKER_ID;

SELECT H.HACKER_ID, H.NAME
FROM HACKERS H
  LEFT OUTER JOIN CHALLENGES C
  ON H.HACKER_ID = C.HACKER_ID
  LEFT OUTER JOIN DIFFICULTY D
  ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
  LEFT OUTER JOIN SUBMISSIONS S
  ON C.CHALLENGE_ID = S.CHALLENGE_ID
WHERE S.SCORE = D.SCORE
ORDER BY H.HACKER_ID;

SELECT H.HACKER_ID, H.NAME
FROM HACKERS H
INNER JOIN CHALLENGES C
ON H.HACKER_ID = C.HACKER_ID
INNER JOIN DIFFICULTY D
ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
INNER JOIN SUBMISSIONS S
ON C.CHALLENGE_ID = S.CHALLENGE_ID
WHERE S.SCORE = D.SCORE
GROUP BY H.HACKER_ID, H.NAME
HAVING COUNT(S.HACKER_ID) > 1
ORDER BY COUNT(S.HACKER_ID) DESC, S.HACKER_ID ASC;
*/

-- 정답 - submissions 테이블에 score값이 difficulty 테이블의 score와 일치(만점)인 챌린지가 2개 이상인 참가자를 찾는 것
SELECT H.HACKER_ID, H.NAME 
FROM SUBMISSIONS S 
INNER JOIN HACKERS H
ON S.HACKER_ID = H.HACKER_ID
INNER JOIN CHALLENGES C 
ON S.CHALLENGE_ID = C.CHALLENGE_ID 
INNER JOIN DIFFICULTY D
ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL  
WHERE S.SCORE = D.SCORE
GROUP BY H.HACKER_ID, H.NAME 
HAVING COUNT(S.HACKER_ID) > 1 
ORDER BY COUNT(S.HACKER_ID) DESC, H.HACKER_ID ASC;